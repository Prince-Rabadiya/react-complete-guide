{"ast":null,"code":"var _jsxFileName = \"/Users/princerabadiya/Projects/01-starting-setup/src/store/cartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cartContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item); // concat creates new array unlike push as we want immutable behaviour\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingItemIndex]; // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n    let updatedItem;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItem] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/princerabadiya/Projects/01-starting-setup/src/store/cartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","amount","concat","updatedTotalAmount","price","existingItemIndex","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./cartContext\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n}\n\nconst cartReducer = (state, action) => {\n  if(action.type === 'ADD'){\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex]\n\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item) // concat creates new array unlike push as we want immutable behaviour\n    }\n  \n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') { \n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingItemIndex]\n    // const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItem;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id)\n    } else {\n      updatedItem = { ...existingItem, amount: existingItem.amount - 1 }\n      updatedItems = [...state.items]\n      updatedItems[existingItem] = updatedItem;\n    }\n\n    return{\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    }\n  }\n\n  return defaultCartState;\n}\n\nconst CartProvider = props => {\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({type: 'ADD', item: item});\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({type: 'REMOVE', id: id});\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return <CartContext.Provider value={cartContext}>\n    {props.children}\n  </CartContext.Provider>\n};\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}